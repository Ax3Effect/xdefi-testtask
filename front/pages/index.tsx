import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { gql } from "@apollo/client";
import client from "../apollo-client";
import TokenList from "../components/TokenList"
import { Fragment, useState } from 'react'
import { Token } from 'graphql';

const Home: NextPage = (token, selectedFrom, setSelectedFrom, selectedTo, setSelectedTo) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>XDefi Swap Test Task</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to XDefi Swap Test Task
        </h1>

        <p className={styles.description}>
          Get started by selecting input and output tokens{' '}
          <span><TokenList tokens={token} selected={selectedFrom} setSelected={setSelectedFrom} /> -> <TokenList tokens={token} /></span> 
        </p>

        
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          made by Ax3{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query {
        token {
          address
          symbol
          name
          decimals
          chainId
          logoURI
          coingeckoId
        }
      }
    `,
  });
  console.log(data.token.slice(0, 5))
  const tokens = data.token.slice(0, 100)

  const [selectedFrom, setSelectedFrom] = useState(tokens[0])
  const [selectedTo, setSelectedTo] = useState(tokens[1])

  return {
    props: {
      token: data,
      selectedFrom: selectedFrom,
      setSelectedFrom: setSelectedFrom,
      selectedTo: selectedTo,
      setSelectedTo: setSelectedTo
    },
 };
}