import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import TokenList from '../components/TokenList.jsx'
import Profile from '../components/Profile.jsx'
import Route from '../components/Route.jsx'
import { gql, useQuery } from "@apollo/client";
import client from "../apollo-client";
import { setState, useState, useCallback } from 'react';

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query {
        token {
          address
          symbol
          name
          decimals
          chainId
          logoURI
          coingeckoId
        }
      }
    `,
  })
  const tokens = data.token.slice(0, 500);
  return {
    props: {
      token: tokens
    },
};
}

export async function bridge(selects) {
  console.log(selects)
  const fromAddress = selects.selectedFrom.address
  const toAddress = selects.selectedTo.address
  console.log(fromAddress)


  const query = gql`
    query Query($from: String, $to: String) {
      routes(from: $from, to: $to) {
        fromId,
        fromSymbol,
        fromName,
        fromPrice,
        toId,
        toName,
        toSymbol,
        toPrice,
        sideId,
        sideName,
        sideSymbol
      }
    }
    `


  const results = await client.query({
    query: query,
    variables: {from: fromAddress, to: toAddress}},
  )
  //selects.selectedRoutes(results) 
  console.log(results)
  //this.setState({selectedRoutes: results})
  return {results}
}



export default function Home(tokens) {

  const [selectedFrom, setSelectedFrom] = useState(null)
  const [selectedTo, setSelectedTo] = useState(null)
  const [selectedRoutes, setSelectedRoutes] = useState(null)
  let routes = null
  //console.log(selectedFrom)
  //console.log(selectedTo)

  async function handleRoute() {
    routes = await bridge({selectedFrom, selectedTo})
    console.log(routes)
    setSelectedRoutes({routes})
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>XDefi Swap Test Task</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to XDefi Swap Test Task
        </h1>

        <p className={styles.description}>
          Get started by selecting input and output tokens{' '}
          <Profile />
          
        </p>
        <div class="grid grid-cols-2 gap-3">
          <div>
        <TokenList tokens={tokens} onSetSelected={setSelectedFrom} /> 
          </div>
          <div>
        <TokenList tokens={tokens} onSetSelected={setSelectedTo} /> 
          </div>
        </div>
        <button class='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' onClick={() => handleRoute()}>Show Routes</button>
      
        <div>
          {selectedRoutes && 
            <Route data={selectedRoutes.routes.results.data.routes} />
          }
        </div>


        
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          made by Ax3{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
